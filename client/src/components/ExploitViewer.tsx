import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Code, 
  ExternalLink, 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  Calendar,
  User,
  FileText,
  Copy,
  Download
} from "lucide-react";

interface ExploitInfo {
  id: string;
  title: string;
  description: string;
  cveId?: string;
  exploitType: string;
  platform: string;
  verified: boolean;
  datePublished: string;
  author: string;
  sourceUrl?: string;
  exploitCode?: string;
}

interface ExploitViewerProps {
  cveId: string;
  onClose: () => void;
}

export default function ExploitViewer({ cveId, onClose }: ExploitViewerProps) {
  const [selectedExploit, setSelectedExploit] = useState<ExploitInfo | null>(null);

  const { data: exploits, isLoading } = useQuery<ExploitInfo[]>({
    queryKey: ["/api/cves", cveId, "exploits"],
    enabled: !!cveId,
  });

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const downloadExploit = (exploit: ExploitInfo) => {
    if (!exploit.exploitCode) return;
    
    const blob = new Blob([exploit.exploitCode], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${exploit.cveId}-exploit.py`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (isLoading) {
    return (
      <div className="space-y-4">
        {[1, 2, 3].map((i) => (
          <Card key={i} className="cyber-bg-surface border cyber-border">
            <CardContent className="pt-6">
              <div className="animate-pulse">
                <div className="h-4 cyber-bg-surface-light rounded w-3/4 mb-2"></div>
                <div className="h-4 cyber-bg-surface-light rounded w-1/2 mb-4"></div>
                <div className="h-20 cyber-bg-surface-light rounded"></div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="cyber-bg-surface rounded-xl p-6 border cyber-border">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-xl font-bold text-white flex items-center space-x-2">
              <Code className="w-6 h-6 cyber-text-red" />
              <span>Exploits for {cveId}</span>
            </h3>
            <p className="cyber-text-muted mt-1">
              {exploits?.length || 0} exploits found from multiple sources
            </p>
          </div>
          <Button onClick={onClose} variant="outline" className="border-gray-600 text-gray-400">
            Close
          </Button>
        </div>
      </div>

      {exploits && exploits.length > 0 ? (
        <Tabs defaultValue="list" className="space-y-4">
          <TabsList className="cyber-bg-surface border cyber-border">
            <TabsTrigger value="list">Exploit List</TabsTrigger>
            <TabsTrigger value="code" disabled={!selectedExploit}>
              View Code
            </TabsTrigger>
          </TabsList>

          <TabsContent value="list" className="space-y-4">
            {exploits.map((exploit) => (
              <div key={exploit.id} className="cyber-bg-surface rounded-xl p-6 border cyber-border hover:border-red-500 transition-all">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3 mb-2">
                      <h4 className="font-semibold text-white text-lg">{exploit.title}</h4>
                      <Badge className={exploit.verified ? "cyber-bg-green text-white" : "bg-gray-600 text-gray-300"}>
                        {exploit.verified ? (
                          <>
                            <CheckCircle className="w-3 h-3 mr-1" />
                            Verified
                          </>
                        ) : (
                          <>
                            <AlertTriangle className="w-3 h-3 mr-1" />
                            Unverified
                          </>
                        )}
                      </Badge>
                      <Badge variant="outline" className="border-gray-600 text-gray-400">
                        {exploit.exploitType}
                      </Badge>
                    </div>
                    
                    <p className="text-white mb-4 leading-relaxed">{exploit.description}</p>
                    
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                      <div className="flex items-center space-x-2">
                        <User className="w-4 h-4 cyber-text-blue" />
                        <div>
                          <span className="cyber-text-dim">Author</span>
                          <div className="text-white">{exploit.author}</div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Calendar className="w-4 h-4 cyber-text-green" />
                        <div>
                          <span className="cyber-text-dim">Published</span>
                          <div className="text-white">{exploit.datePublished}</div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Shield className="w-4 h-4 cyber-text-amber" />
                        <div>
                          <span className="cyber-text-dim">Platform</span>
                          <div className="text-white">{exploit.platform}</div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <FileText className="w-4 h-4 cyber-text-muted" />
                        <div>
                          <span className="cyber-text-dim">Type</span>
                          <div className="text-white">{exploit.exploitType}</div>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex flex-col space-y-2 ml-6">
                    {exploit.exploitCode && (
                      <Button
                        onClick={() => setSelectedExploit(exploit)}
                        className="cyber-button-primary"
                      >
                        <Code className="w-4 h-4 mr-2" />
                        View Code
                      </Button>
                    )}
                    {exploit.sourceUrl && (
                      <Button
                        onClick={() => window.open(exploit.sourceUrl, '_blank')}
                        className="cyber-button-secondary"
                      >
                        <ExternalLink className="w-4 h-4 mr-2" />
                        Source
                      </Button>
                    )}
                    {exploit.exploitCode && (
                      <Button
                        onClick={() => downloadExploit(exploit)}
                        variant="outline"
                        className="border-gray-600 text-gray-400 hover:text-white"
                      >
                        <Download className="w-4 h-4 mr-2" />
                        Download
                      </Button>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </TabsContent>

          <TabsContent value="code">
            {selectedExploit && (
              <div className="cyber-bg-surface rounded-xl p-6 border cyber-border">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="font-semibold text-white">{selectedExploit.title}</h4>
                  <div className="flex space-x-2">
                    <Button
                      onClick={() => copyToClipboard(selectedExploit.exploitCode || '')}
                      variant="outline"
                      className="border-gray-600 text-gray-400 hover:text-white"
                    >
                      <Copy className="w-4 h-4 mr-2" />
                      Copy
                    </Button>
                    <Button
                      onClick={() => downloadExploit(selectedExploit)}
                      variant="outline"
                      className="border-gray-600 text-gray-400 hover:text-white"
                    >
                      <Download className="w-4 h-4 mr-2" />
                      Download
                    </Button>
                  </div>
                </div>
                
                <div className="relative">
                  <pre className="cyber-bg-dark rounded-lg p-4 text-sm text-green-400 font-mono overflow-x-auto border cyber-border">
                    <code>{selectedExploit.exploitCode}</code>
                  </pre>
                </div>
                
                <div className="mt-4 p-4 cyber-bg-red-dark rounded-lg border border-red-500">
                  <div className="flex items-center space-x-2 mb-2">
                    <AlertTriangle className="w-5 h-5 text-red-400" />
                    <span className="font-semibold text-red-400">Security Warning</span>
                  </div>
                  <p className="text-red-200 text-sm">
                    This exploit code is provided for educational and authorized testing purposes only. 
                    Using this code against systems without explicit permission is illegal and unethical.
                  </p>
                </div>
              </div>
            )}
          </TabsContent>
        </Tabs>
      ) : (
        <div className="text-center cyber-text-muted py-12">
          <Code className="w-16 h-16 mx-auto mb-4 opacity-50" />
          <p className="text-lg">No public exploits found for {cveId}</p>
          <p className="text-sm mt-2">
            This could indicate the vulnerability is recently disclosed or requires specialized knowledge.
          </p>
        </div>
      )}
    </div>
  );
}